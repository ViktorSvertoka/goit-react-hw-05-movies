{"version":3,"file":"static/js/257.0a24b974.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/TmbdApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 24px;\n  gap: 24px;\n`;\n\nexport const List = styled.ul`\n  display: inline-flex;\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from './../../services/TmbdApi';\nimport Loader from './../../components/Loader/Loader';\nimport { Container, List } from './MovieDetails.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL с помощью хука useParams\n  const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n  const location = useLocation(); // Получение текущего местоположения (URL)\n\n  useEffect(() => {\n    const fetchMovieDetailsFilms = async () => {\n      setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n      try {\n        const detailMovie = await fetchMovieDetails(movieId); // Выполняем запрос на получение подробной информации о фильме с использованием API-сервиса\n        setMovieInfo(detailMovie); // Устанавливаем полученную информацию о фильме в состояние\n      } catch (error) {\n        console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n      } finally {\n        setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n      }\n    };\n    fetchMovieDetailsFilms(); // Вызываем функцию получения информации о фильме при каждом изменении параметра movieId\n  }, [movieId]);\n\n  const {\n    title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n  } = movieInfo || {};\n\n  return (\n    <>\n      <Link to={location.state?.from ?? '/'}>\n        <button type=\"button\">Go back</button>\n      </Link>\n      {loading && <Loader />}\n\n      {movieInfo && (\n        <Container>\n          <img\n            width=\"300px\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n            }\n            alt={original_title}\n          />\n          <div>\n            <h1>\n              {title} ({release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {popularity}</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <List>\n              {genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </List>\n          </div>\n        </Container>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <hr />\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","List","ul","_templateObject2","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieInfo","setMovieInfo","_useState3","_useState4","loading","setLoading","location","useLocation","useEffect","fetchMovieDetailsFilms","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","detailMovie","wrap","_context","prev","next","fetchMovieDetails","sent","t0","console","log","finish","stop","apply","arguments","_ref2","title","release_date","popularity","overview","genres","poster_path","original_title","_jsxs","_Fragment","children","_jsx","Link","to","state","from","type","Loader","width","src","concat","alt","slice","map","genre","name","id","Outlet","API_KEY","axios","defaults","baseURL","fetchTrending","response","get","abrupt","data","results","fetchSearchByKeyword","_callee2","keyword","_context2","_x","_ref3","_callee3","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}