{"version":3,"file":"static/js/247.72699fa5.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchActors } from './../../services/TmbdApi';\nimport Loader from './../Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL\n  const [actors, setActors] = useState([]); // Состояние для хранения списка актеров\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n\n  useEffect(() => {\n    const onActorsOfMovie = async () => {\n      setLoading(true); // Устанавливаем флаг загрузки в true\n      try {\n        const actors = await fetchActors(movieId); // Выполняем запрос к API для получения актеров фильма\n        setActors(actors); // Обновляем состояние актеров с полученными данными\n      } catch (error) {\n        console.log(error); // Обрабатываем ошибку, если произошла\n      } finally {\n        setLoading(false); // Устанавливаем флаг загрузки в false после выполнения запроса\n      }\n    };\n    onActorsOfMovie(); // Вызываем функцию для получения актеров фильма\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}{' '}\n      {/* Отображение компонента Loader во время загрузки */}\n      <ul>\n        {actors.map(actor => (\n          <li key={actor.id}>\n            <img\n              width=\"200px\"\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w500${actor.profile_path}` // Если у актера есть изображение, используем его URL\n                  : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg` // Если у актера нет изображения, используем заглушку\n              }\n              alt={actor.original_name}\n            />\n            <p>{actor.name}</p> {/* Отображение имени актера */}\n            <p>Character: {actor.character}</p> {/* Отображение роли актера */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <BallTriangle\n        height=\"100\"\n        width=\"100\"\n        color=\"tomato\"\n        ariaLabel=\"loading\"\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","loading","setLoading","useEffect","onActorsOfMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_actors","wrap","_context","prev","next","fetchActors","sent","t0","console","log","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","actor","width","src","profile_path","concat","alt","original_name","name","character","id","Container","styled","div","_templateObject","_taggedTemplateLiteral","BallTriangle","height","color","ariaLabel","API_KEY","axios","defaults","baseURL","fetchTrending","response","get","abrupt","data","results","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}