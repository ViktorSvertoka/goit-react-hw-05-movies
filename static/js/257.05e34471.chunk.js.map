{"version":3,"file":"static/js/257.05e34471.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/TmbdApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <BallTriangle\n        height=\"100\"\n        width=\"100\"\n        color=\"tomato\"\n        ariaLabel=\"loading\"\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 24px;\n  gap: 24px;\n`;\n\nexport const List = styled.ul`\n  display: inline-flex;\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from './../../services/TmbdApi';\nimport Loader from './../../components/Loader/Loader';\nimport { Container, List } from './MovieDetails.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL с помощью хука useParams\n  const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n  const location = useLocation(); // Получение текущего местоположения (URL)\n\n  useEffect(() => {\n    const fetchMovieDetailsFilms = async () => {\n      setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n      try {\n        const detailMovie = await fetchMovieDetails(movieId); // Выполняем запрос на получение подробной информации о фильме с использованием API-сервиса\n        setMovieInfo(detailMovie); // Устанавливаем полученную информацию о фильме в состояние\n      } catch (error) {\n        console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n      } finally {\n        setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n      }\n    };\n    fetchMovieDetailsFilms(); // Вызываем функцию получения информации о фильме при каждом изменении параметра movieId\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/movies'}>\n        <button type=\"button\">Go back</button>\n      </Link>\n      {loading && <Loader />}{' '}\n      {/* Отображение компонента загрузки во время выполнения запроса */}\n      {movieInfo && (\n        <Container>\n          <img\n            width=\"300px\"\n            src={'https://image.tmdb.org/t/p/w500' + movieInfo.poster_path}\n            alt={movieInfo.original_title}\n          />\n          <div>\n            <h1>\n              {movieInfo.title} ({movieInfo.release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {movieInfo.popularity}</p>\n            <h2>Overview</h2>\n            <p>{movieInfo.overview}</p>\n            <h2>Genres</h2>\n            <List>\n              {movieInfo.genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </List>\n          </div>\n        </Container>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>{' '}\n            {/* Ссылка на страницу с информацией о актерах */}\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>{' '}\n            {/* Ссылка на страницу с отзывами */}\n          </li>\n        </ul>\n        <hr />\n        <Outlet /> {/* Отображение вложенного маршрута */}\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","_jsx","children","BallTriangle","height","width","color","ariaLabel","List","ul","_templateObject2","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieInfo","setMovieInfo","_useState3","_useState4","loading","setLoading","location","useLocation","useEffect","fetchMovieDetailsFilms","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","detailMovie","wrap","_context","prev","next","fetchMovieDetails","sent","t0","console","log","finish","stop","apply","arguments","_jsxs","_Fragment","Link","to","state","from","type","Loader","src","poster_path","alt","original_title","title","release_date","slice","popularity","overview","genres","map","genre","name","id","Outlet","API_KEY","axios","defaults","baseURL","fetchTrending","response","get","concat","abrupt","data","results","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","_ref3","_callee3","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}