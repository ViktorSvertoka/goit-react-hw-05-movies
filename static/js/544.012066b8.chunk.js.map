{"version":3,"file":"static/js/544.012066b8.chunk.js","mappings":"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","sources":["components/EditorList/EditorList.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Home/Home.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation(); // Получение текущего объекта useLocation из react-router-dom\n\n  return (\n    <ul>\n      {films &&\n        films.map(film => (\n          <li key={film.id}>\n            {/* Создание ссылки с передачей параметров источника обьекта from */}\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <BallTriangle\n        height=\"100\"\n        width=\"100\"\n        color=\"tomato\"\n        ariaLabel=\"loading\"\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport EditorList from './../../components/EditorList/EditorList';\nimport { fetchTrending } from './../../services/TmbdApi';\nimport Loader from './../../components/Loader/Loader';\n\nconst HomePage = () => {\n  const [films, setFilms] = useState([]); // Состояние для хранения списка фильмов\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n\n  useEffect(() => {\n    const fetchTrendingFilms = async () => {\n      setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n      try {\n        const trendingFilms = await fetchTrending(); // Выполняем запрос на получение популярных фильмов с использованием API-сервиса\n        setFilms(trendingFilms); // Устанавливаем полученные фильмы в состояние\n      } catch (error) {\n        console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n      } finally {\n        setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n      }\n    };\n    fetchTrendingFilms(); // Вызываем функцию получения популярных фильмов при монтировании компонента (пустой массив зависимостей)\n  }, []);\n\n  return (\n    <main>\n      <h1>Trending today</h1>\n      {films && <EditorList films={films} />}{' '}\n      {/* Отображение списка фильмов с помощью компонента EditorList */}\n      {loading && <Loader />}{' '}\n      {/* Отображение компонента загрузки во время выполнения запроса */}\n    </main>\n  );\n};\n\nexport default HomePage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["_ref","films","location","useLocation","_jsx","children","map","film","Link","to","concat","id","state","from","title","Container","styled","div","_templateObject","_taggedTemplateLiteral","BallTriangle","height","width","color","ariaLabel","_useState","useState","_useState2","_slicedToArray","setFilms","_useState3","_useState4","loading","setLoading","useEffect","fetchTrendingFilms","_asyncToGenerator","_regeneratorRuntime","mark","_callee","trendingFilms","wrap","_context","prev","next","fetchTrending","sent","t0","console","log","finish","stop","apply","arguments","_jsxs","EditorList","Loader","API_KEY","axios","defaults","baseURL","response","get","abrupt","data","results","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}