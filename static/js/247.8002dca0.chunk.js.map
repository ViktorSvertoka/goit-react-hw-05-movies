{"version":3,"file":"static/js/247.8002dca0.chunk.js","mappings":"uMAsDA,UAjDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAqB1B,OAnBAG,EAAAA,EAAAA,YAAU,WAEND,GAAW,IAEXE,EAAAA,EAAAA,IAAYb,GACTc,MAAK,SAAAR,GACJC,EAAUD,EACZ,IACCS,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACd,IACCG,SAAQ,WACPR,GAAW,EACb,GAIN,GAAG,CAACX,KAGFoB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGX,IAAWY,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEnBD,EAAAA,EAAAA,KAAA,MAAAD,SACGf,EAAOkB,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAYF,EAAZE,aAAcC,EAAaH,EAAbG,cAAeC,EAAIJ,EAAJI,KAAMC,EAASL,EAATK,UAAS,OAC7DV,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACES,MAAM,QACNC,IACEL,EAAY,kCAAAM,OAC0BN,GAAY,6EAGpDO,IAAKN,KAEPN,EAAAA,EAAAA,KAAA,KAAAD,SAAIQ,KACJT,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYS,OAXRJ,EAYJ,QAKf,C,sLChDAS,EAAAA,EAAMC,SAASC,QAAU,gCAGzB,IAAMC,EAAU,mCAGHC,EAAa,eAAAd,GAAAe,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACJb,EAAAA,EAAMc,IAAI,8BAADhB,OAA+BK,IAAW,KAAD,EAA3D,OAARM,EAAQE,EAAAI,KAAAJ,EAAAK,OAAA,SACPP,EAASQ,KAAKC,SAAO,wBAAAP,EAAAQ,OAAA,GAAAX,EAAA,KAC7B,kBAHyB,OAAAlB,EAAA8B,MAAA,KAAAC,UAAA,KAMbC,EAAoB,eAAAC,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiB,EAAMC,GAAO,IAAAhB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EACxBb,EAAAA,EAAMc,IAAI,wBAADhB,OACNK,EAAO,qDAAAL,OAAoD2B,IACnF,KAAD,EAFa,OAARhB,EAAQiB,EAAAX,KAAAW,EAAAV,OAAA,SAGPP,EAASQ,KAAKC,SAAO,wBAAAQ,EAAAP,OAAA,GAAAK,EAAA,KAC7B,gBALgCG,GAAA,OAAAJ,EAAAH,MAAA,KAAAC,UAAA,KAQpBO,EAAiB,eAAAC,GAAAxB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuB,EAAMjE,GAAO,IAAA4C,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAqB,GAAA,cAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,cAAAkB,EAAAlB,KAAA,EACrBb,EAAAA,EAAMc,IAAI,SAADhB,OACrBjC,EAAO,aAAAiC,OAAYK,EAAO,oBACnC,KAAD,EAFa,OAARM,EAAQsB,EAAAhB,KAAAgB,EAAAf,OAAA,SAGPP,EAASQ,MAAI,wBAAAc,EAAAZ,OAAA,GAAAW,EAAA,KACrB,gBAL6BE,GAAA,OAAAH,EAAAT,MAAA,KAAAC,UAAA,KAQjB3C,EAAW,eAAAuD,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAMrE,GAAO,IAAA4C,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAtB,KAAA,EACfb,EAAAA,EAAMc,IAAI,SAADhB,OACrBjC,EAAO,qBAAAiC,OAAoBK,EAAO,oBAC3C,KAAD,EAFa,OAARM,EAAQ0B,EAAApB,KAAAoB,EAAAnB,OAAA,SAGPP,EAASQ,KAAKmB,MAAI,wBAAAD,EAAAhB,OAAA,GAAAe,EAAA,KAC1B,gBALuBG,GAAA,OAAAJ,EAAAb,MAAA,KAAAC,UAAA,KAQXiB,EAAY,eAAAC,GAAAlC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiC,EAAM3E,GAAO,IAAA4C,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EAChBb,EAAAA,EAAMc,IAAI,SAADhB,OACrBjC,EAAO,qBAAAiC,OAAoBK,EAAO,2BAC3C,KAAD,EAFa,OAARM,EAAQgC,EAAA1B,KAAA0B,EAAAzB,OAAA,SAGPP,EAASQ,KAAKC,SAAO,wBAAAuB,EAAAtB,OAAA,GAAAqB,EAAA,KAC7B,gBALwBE,GAAA,OAAAH,EAAAnB,MAAA,KAAAC,UAAA,I","sources":["components/Cast/Cast.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchActors } from '..//../services/TmbdApi';\nimport Loader from '../Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL\n  const [actors, setActors] = useState([]); // Состояние для хранения списка актеров\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n\n  useEffect(() => {\n    const onActorsOfMovie = () => {\n      setLoading(true); // Устанавливаем флаг загрузки в true\n\n      fetchActors(movieId)\n        .then(actors => {\n          setActors(actors); // Обновляем состояние актеров с полученными данными\n        })\n        .catch(error => {\n          console.log(error); // Обрабатываем ошибку, если произошла\n        })\n        .finally(() => {\n          setLoading(false); // Устанавливаем флаг загрузки в false после выполнения запроса\n        });\n    };\n\n    onActorsOfMovie(); // Вызываем функцию для получения актеров фильма\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n\n      <ul>\n        {actors.map(({ id, profile_path, original_name, name, character }) => (\n          <li key={id}>\n            <img\n              width=\"200px\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n              }\n              alt={original_name}\n            />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","loading","setLoading","useEffect","fetchActors","then","catch","error","console","log","finally","_jsxs","children","_jsx","Loader","map","_ref","id","profile_path","original_name","name","character","width","src","concat","alt","axios","defaults","baseURL","API_KEY","fetchTrending","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","get","sent","abrupt","data","results","stop","apply","arguments","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}