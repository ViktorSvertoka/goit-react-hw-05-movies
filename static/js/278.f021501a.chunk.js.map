{"version":3,"file":"static/js/278.f021501a.chunk.js","mappings":"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","sources":["components/EditorList/EditorList.jsx","pages/Movies/Movies.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation(); // Получение текущего объекта useLocation из react-router-dom\n\n  return (\n    <ul>\n      {films &&\n        films.map(film => (\n          <li key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchByKeyword } from './../../services/TmbdApi';\nimport Loader from './../../components/Loader/Loader';\nimport EditorList from './../../components/EditorList/EditorList';\n\nconst MoviesPage = () => {\n  const [searchFilms, setSearchFilms] = useState([]); // Состояние для хранения результатов поиска фильмов\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n  const [searchParams, setSearchParams] = useSearchParams({}); // Хук для работы с параметрами URL\n  const queryMovie = searchParams.get('query'); // Получение значения параметра 'query' из URL\n  const [noMoviesText, setNoMoviesText] = useState(false); // Состояние для отображения текста \"There is no movies with this request\"\n\n  const handleSubmit = event => {\n    event.preventDefault(); // Предотвращение перезагрузки страницы при отправке формы\n    setSearchParams({ query: event.target.elements.query.value.toLowerCase() }); // Установка значения параметра 'query' в URL\n  };\n\n  useEffect(() => {\n    if (queryMovie) {\n      const searchMovies = () => {\n        setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n\n        fetchSearchByKeyword(queryMovie)\n          .then(searchResults => {\n            setSearchFilms(searchResults); // Устанавливаем полученные результаты поиска в состояние\n            if (searchResults.length === 0) {\n              setNoMoviesText(true);\n            } else {\n              setNoMoviesText(false);\n            }\n          })\n          .catch(error => {\n            console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n          })\n          .finally(() => {\n            setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n          });\n      };\n\n      searchMovies(); // Вызываем функцию поиска фильмов при каждом изменении параметра 'query'\n    }\n  }, [queryMovie]);\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" autoFocus />\n\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <Loader />}\n\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n\n      {searchFilms && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default MoviesPage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["_ref","films","location","useLocation","_jsx","children","map","film","Link","to","concat","id","state","from","title","_useState","useState","_useState2","_slicedToArray","searchFilms","setSearchFilms","_useState3","_useState4","loading","setLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","queryMovie","get","_useState5","_useState6","noMoviesText","setNoMoviesText","useEffect","fetchSearchByKeyword","then","searchResults","length","catch","error","console","log","finally","_jsxs","onSubmit","event","preventDefault","query","target","elements","value","toLowerCase","type","name","autoFocus","Loader","EditorList","axios","defaults","baseURL","API_KEY","fetchTrending","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}