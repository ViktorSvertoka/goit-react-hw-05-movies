{"version":3,"file":"static/js/257.4ee2dca3.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/TmbdApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 24px;\n  gap: 24px;\n`;\n\nexport const List = styled.ul`\n  display: inline-flex;\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { fetchMovieDetails } from '..//../services/TmbdApi';\nimport Loader from '..//../components/Loader/Loader';\nimport { Container, List } from './MovieDetails.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL с помощью хука useParams\n  const [movieInfo, setMovieInfo] = useState(null); // Состояние для хранения информации о фильме\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n  const location = useLocation(); // Получение текущего местоположения (URL)\n\n  useEffect(() => {\n    const fetchMovieDetailsFilms = () => {\n      setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n\n      fetchMovieDetails(movieId)\n        .then(detailMovie => {\n          setMovieInfo(detailMovie); // Устанавливаем полученную информацию о фильме в состояние\n        })\n        .catch(error => {\n          console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n        })\n        .finally(() => {\n          setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n        });\n    };\n\n    fetchMovieDetailsFilms(); // Вызываем функцию получения информации о фильме при каждом изменении параметра movieId\n  }, [movieId]);\n\n  const {\n    title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n  } = movieInfo || {};\n\n  return (\n    <>\n      <Link to={location.state?.from ?? '/'}>\n        <button type=\"button\">Go back</button>\n      </Link>\n      {loading && <Loader />}\n\n      {movieInfo && (\n        <Container>\n          <img\n            width=\"300px\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n            }\n            alt={original_title}\n          />\n          <div>\n            <h1>\n              {title} ({release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {popularity}</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <List>\n              {genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </List>\n          </div>\n        </Container>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n        <hr />\n        <Outlet />\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","List","ul","_templateObject2","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","movieInfo","setMovieInfo","_useState3","_useState4","loading","setLoading","location","useLocation","useEffect","fetchMovieDetails","then","detailMovie","catch","error","console","log","finally","_ref","title","release_date","popularity","overview","genres","poster_path","original_title","_jsxs","_Fragment","children","_jsx","Link","to","state","from","type","Loader","width","src","concat","alt","slice","map","genre","name","id","Outlet","API_KEY","axios","defaults","baseURL","fetchTrending","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","get","sent","abrupt","data","results","stop","apply","arguments","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","_ref3","_callee3","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}