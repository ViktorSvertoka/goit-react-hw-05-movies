{"version":3,"file":"static/js/278.d289b0be.chunk.js","mappings":"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","sources":["components/EditorList/EditorList.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Movies/Movies.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation(); // Получение текущего объекта useLocation из react-router-dom\n\n  return (\n    <ul>\n      {films &&\n        films.map(film => (\n          <li key={film.id}>\n            {/* Создание ссылки с передачей параметров источника обьекта from */}\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <BallTriangle\n        height=\"100\"\n        width=\"100\"\n        color=\"tomato\"\n        ariaLabel=\"loading\"\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport api from '..//../services/TmbdApi';\nimport Loader from '..//../components/Loader/Loader';\nimport EditorList from '..//../components/EditorList/EditorList';\n\nconst MoviesPage = () => {\n  const [searchFilms, setSearchFilms] = useState([]); // Состояние для хранения результатов поиска фильмов\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n  const [searchParams, setSearchParams] = useSearchParams({}); // Хук для работы с параметрами URL\n  const queryMovie = searchParams.get('query'); // Получение значения параметра 'query' из URL\n  const [noMoviesText, setNoMoviesText] = useState(false); // Состояние для отображения текста \"There is no movies with this request\"\n\n  const handleSubmit = event => {\n    event.preventDefault(); // Предотвращение перезагрузки страницы при отправке формы\n    setSearchParams({ query: event.target.elements.query.value.toLowerCase() }); // Установка значения параметра 'query' в URL\n  };\n\n  useEffect(() => {\n    if (queryMovie) {\n      const searchMovies = async () => {\n        setLoading(true); // Устанавливаем состояние загрузки в true перед запросом\n        try {\n          const searchResults = await api.fetchSearchByKeyword(queryMovie); // Выполняем запрос на поиск фильмов по ключевому слову с использованием API-сервиса\n          setSearchFilms(searchResults); // Устанавливаем полученные результаты поиска в состояние\n          if (searchResults.length === 0) {\n            setNoMoviesText(true);\n          } else {\n            setNoMoviesText(false);\n          }\n        } catch (error) {\n          console.log(error); // Обрабатываем возможные ошибки и выводим их в консоль\n        } finally {\n          setLoading(false); // Устанавливаем состояние загрузки в false после завершения запроса\n        }\n      };\n      searchMovies(); // Вызываем функцию поиска фильмов при каждом изменении параметра 'query'\n    }\n  }, [queryMovie]);\n\n  return (\n    <main>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" autoFocus />{' '}\n        {/* Поле ввода для поискового запроса */}\n        <button type=\"submit\">Search</button> {/* Кнопка отправки формы */}\n      </form>\n      {loading && <Loader />}{' '}\n      {/* Отображение компонента загрузки во время выполнения запроса */}\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n      {/* Отображение текста, если фильмы не найдены */}\n      {searchFilms && <EditorList films={searchFilms} />}{' '}\n      {/* Отображение списка найденных фильмов */}\n    </main>\n  );\n};\n\nexport default MoviesPage;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Функция для получения трендовых фильмов\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nconst fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nconst fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nconst fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nconst fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\n// Объект с экспортируемыми функциями\nconst api = {\n  fetchTrending, // Получение трендовых фильмов\n  fetchSearchByKeyword, // Поиск фильмов по ключевому слову\n  fetchMovieDetails, // Получение деталей фильма\n  fetchActors, // Получение списка актеров фильма\n  fetchReviews, // Получение отзывов о фильме\n};\n\nexport default api;\n"],"names":["_ref","films","location","useLocation","_jsx","children","map","film","Link","to","concat","id","state","from","title","Container","styled","div","_templateObject","_taggedTemplateLiteral","BallTriangle","height","width","color","ariaLabel","_useState","useState","_useState2","_slicedToArray","searchFilms","setSearchFilms","_useState3","_useState4","loading","setLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","queryMovie","get","_useState5","_useState6","noMoviesText","setNoMoviesText","useEffect","searchMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","searchResults","wrap","_context","prev","next","api","fetchSearchByKeyword","sent","length","t0","console","log","finish","stop","apply","arguments","_jsxs","onSubmit","event","preventDefault","query","target","elements","value","toLowerCase","type","name","autoFocus","Loader","EditorList","axios","defaults","baseURL","API_KEY","fetchTrending","response","abrupt","data","results","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}