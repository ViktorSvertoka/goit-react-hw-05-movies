{"version":3,"file":"static/js/247.be07ee0e.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport api from '..//../services/TmbdApi';\nimport Loader from '../Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL\n  const [actors, setActors] = useState([]); // Состояние для хранения списка актеров\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n\n  useEffect(() => {\n    const onActorsOfMovie = async () => {\n      setLoading(true); // Устанавливаем флаг загрузки в true\n      try {\n        const actors = await api.fetchActors(movieId); // Выполняем запрос к API для получения актеров фильма\n        setActors(actors); // Обновляем состояние актеров с полученными данными\n      } catch (error) {\n        console.log(error); // Обрабатываем ошибку, если произошла\n      } finally {\n        setLoading(false); // Устанавливаем флаг загрузки в false после выполнения запроса\n      }\n    };\n    onActorsOfMovie(); // Вызываем функцию для получения актеров фильма\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}{' '}\n      {/* Отображение компонента Loader во время загрузки */}\n      <ul>\n        {actors.map(actor => (\n          <li key={actor.id}>\n            <img\n              width=\"200px\"\n              src={'https://image.tmdb.org/t/p/w500' + actor.profile_path} // Формирование URL изображения актера\n              alt={actor.original_name}\n            />\n            <p>{actor.name}</p> {/* Отображение имени актера */}\n            <p>Character: {actor.character}</p> {/* Отображение роли актера */}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { BallTriangle } from 'react-loader-spinner';\nimport { Container } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Container>\n      <BallTriangle\n        height=\"100\"\n        width=\"100\"\n        color=\"tomato\"\n        ariaLabel=\"loading\"\n      />\n    </Container>\n  );\n};\n\nexport default Loader;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Функция для получения трендовых фильмов\nconst fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nconst fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nconst fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nconst fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nconst fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\n// Объект с экспортируемыми функциями\nconst api = {\n  fetchTrending, // Получение трендовых фильмов\n  fetchSearchByKeyword, // Поиск фильмов по ключевому слову\n  fetchMovieDetails, // Получение деталей фильма\n  fetchActors, // Получение списка актеров фильма\n  fetchReviews, // Получение отзывов о фильме\n};\n\nexport default api;\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","loading","setLoading","useEffect","onActorsOfMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_actors","wrap","_context","prev","next","api","fetchActors","sent","t0","console","log","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","actor","width","src","profile_path","alt","original_name","name","character","id","Container","styled","div","_templateObject","_taggedTemplateLiteral","BallTriangle","height","color","ariaLabel","axios","defaults","baseURL","API_KEY","fetchTrending","response","get","concat","abrupt","data","results","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}