{"version":3,"file":"static/js/247.65cbb16c.chunk.js","mappings":"yNAkDA,UA7Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAiB1B,OAfAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACJ,OAAlBZ,GAAW,GAAOU,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEKC,EAAAA,EAAAA,IAAYxB,GAAS,KAAD,EAAnCM,EAAMe,EAAAI,KACZlB,EAAUD,GAASe,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEnBM,QAAQC,IAAGP,EAAAK,IAAS,QAED,OAFCL,EAAAC,KAAA,GAEpBX,GAAW,GAAQU,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEtB,kBAVoB,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAWrBnB,GACF,GAAG,CAACb,KAGFiC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGxB,IAAWyB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEnBD,EAAAA,EAAAA,KAAA,MAAAD,SACG5B,EAAO+B,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAYF,EAAZE,aAAcC,EAAaH,EAAbG,cAAeC,EAAIJ,EAAJI,KAAMC,EAASL,EAATK,UAAS,OAC7DV,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACES,MAAM,QACNC,IACEL,EAAY,kCAAAM,OAC0BN,GAAY,6EAGpDO,IAAKN,KAEPN,EAAAA,EAAAA,KAAA,KAAAD,SAAIQ,KACJT,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYS,OAXRJ,EAYJ,QAKf,C,sLC5CMS,EAAU,mCAGhBC,EAAAA,EAAMC,SAASC,QAAU,gCAGlB,IAAMC,EAAa,eAAAtC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAmC,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACJ0B,EAAAA,EAAMK,IAAI,8BAADR,OAA+BE,IAAW,KAAD,EAA3D,OAARK,EAAQhC,EAAAI,KAAAJ,EAAAkC,OAAA,SACPF,EAASG,KAAKC,SAAO,wBAAApC,EAAAS,OAAA,GAAAZ,EAAA,KAC7B,kBAHyB,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAMb0B,EAAoB,eAAApB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0C,EAAMC,GAAO,IAAAP,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACxB0B,EAAAA,EAAMK,IAAI,wBAADR,OACNE,EAAO,qDAAAF,OAAoDc,IACnF,KAAD,EAFa,OAARP,EAAQQ,EAAApC,KAAAoC,EAAAN,OAAA,SAGPF,EAASG,KAAKC,SAAO,wBAAAI,EAAA/B,OAAA,GAAA6B,EAAA,KAC7B,gBALgCG,GAAA,OAAAxB,EAAAP,MAAA,KAAAC,UAAA,KAQpB+B,EAAiB,eAAAC,GAAAjD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgD,EAAMjE,GAAO,IAAAqD,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACrB0B,EAAAA,EAAMK,IAAI,SAADR,OACrB9C,EAAO,aAAA8C,OAAYE,EAAO,oBACnC,KAAD,EAFa,OAARK,EAAQa,EAAAzC,KAAAyC,EAAAX,OAAA,SAGPF,EAASG,MAAI,wBAAAU,EAAApC,OAAA,GAAAmC,EAAA,KACrB,gBAL6BE,GAAA,OAAAH,EAAAjC,MAAA,KAAAC,UAAA,KAQjBR,EAAW,eAAA4C,GAAArD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoD,EAAMrE,GAAO,IAAAqD,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAkD,GAAA,cAAAA,EAAAhD,KAAAgD,EAAA/C,MAAA,cAAA+C,EAAA/C,KAAA,EACf0B,EAAAA,EAAMK,IAAI,SAADR,OACrB9C,EAAO,qBAAA8C,OAAoBE,EAAO,oBAC3C,KAAD,EAFa,OAARK,EAAQiB,EAAA7C,KAAA6C,EAAAf,OAAA,SAGPF,EAASG,KAAKe,MAAI,wBAAAD,EAAAxC,OAAA,GAAAuC,EAAA,KAC1B,gBALuBG,GAAA,OAAAJ,EAAArC,MAAA,KAAAC,UAAA,KAQXyC,EAAY,eAAAC,GAAA3D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0D,EAAM3E,GAAO,IAAAqD,EAAA,OAAArC,EAAAA,EAAAA,KAAAI,MAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,cAAAqD,EAAArD,KAAA,EAChB0B,EAAAA,EAAMK,IAAI,SAADR,OACrB9C,EAAO,qBAAA8C,OAAoBE,EAAO,2BAC3C,KAAD,EAFa,OAARK,EAAQuB,EAAAnD,KAAAmD,EAAArB,OAAA,SAGPF,EAASG,KAAKC,SAAO,wBAAAmB,EAAA9C,OAAA,GAAA6C,EAAA,KAC7B,gBALwBE,GAAA,OAAAH,EAAA3C,MAAA,KAAAC,UAAA,I","sources":["components/Cast/Cast.jsx","services/TmbdApi.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchActors } from './../../services/TmbdApi';\nimport Loader from './../Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // Получение параметра movieId из URL\n  const [actors, setActors] = useState([]); // Состояние для хранения списка актеров\n  const [loading, setLoading] = useState(false); // Состояние для отображения состояния загрузки\n\n  useEffect(() => {\n    const onActorsOfMovie = async () => {\n      setLoading(true); // Устанавливаем флаг загрузки в true\n      try {\n        const actors = await fetchActors(movieId); // Выполняем запрос к API для получения актеров фильма\n        setActors(actors); // Обновляем состояние актеров с полученными данными\n      } catch (error) {\n        console.log(error); // Обрабатываем ошибку, если произошла\n      } finally {\n        setLoading(false); // Устанавливаем флаг загрузки в false после выполнения запроса\n      }\n    };\n    onActorsOfMovie(); // Вызываем функцию для получения актеров фильма\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n\n      <ul>\n        {actors.map(({ id, profile_path, original_name, name, character }) => (\n          <li key={id}>\n            <img\n              width=\"200px\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n              }\n              alt={original_name}\n            />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","// Импортируем модуль axios для работы с HTTP-запросами\nimport axios from 'axios';\n\n// Константа с API-ключом\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\n// Устанавливаем базовый URL для всех запросов\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// Функция для получения трендовых фильмов\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// Функция для поиска фильмов по ключевому слову\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\n// Функция для получения деталей фильма по его идентификатору\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// Функция для получения списка актеров фильма\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// Функция для получения отзывов о фильме\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","loading","setLoading","useEffect","onActorsOfMovie","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_actors","wrap","_context","prev","next","fetchActors","sent","t0","console","log","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","map","_ref2","id","profile_path","original_name","name","character","width","src","concat","alt","API_KEY","axios","defaults","baseURL","fetchTrending","response","get","abrupt","data","results","fetchSearchByKeyword","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}